--- satyr-0.24/lib/rpm.c.0001~	2017-11-01 15:07:06.000000000 +0100
+++ satyr-0.24/lib/rpm.c	2017-12-31 04:17:16.586741943 +0100
@@ -25,11 +25,11 @@
 #include "internal_utils.h"
 #include <errno.h>
 #ifdef HAVE_LIBRPM
-#include <rpm/rpmlib.h>
+#include <rpm/rpmtag.h>
 #include <rpm/rpmdb.h>
+#include <rpm/rpmio.h>
+#include <rpm/rpmrc.h>
 #include <rpm/rpmts.h>
-#include <rpm/rpmtd.h>
-#include <rpm/header.h>
 #endif
 #include <fcntl.h>
 #include <assert.h>
@@ -279,18 +279,18 @@ header_get_string(Header header,
                   rpmTag tag,
                   char **result)
 {
-    rpmtd tag_data = rpmtdNew();
-    int success = headerGet(header,
-                            tag,
-                            tag_data,
-                            HEADERGET_DEFAULT);
+    HE_s h;
+    memset(&h, 0, sizeof(h));
+    h.tag = tag;
+    h.ix = -1;
+    int success = headerGet(header, &h, 0);
 
     if (success != 1)
         return false;
 
-    const char *str = rpmtdGetString(tag_data);
+    const char *str = (h.t == RPM_STRING_TYPE) ? h.p.str :
+	    (((h.t == RPM_STRING_ARRAY_TYPE) || (h.t == RPM_I18NSTRING_TYPE)) ? h.p.argv[0] : NULL);
     *result = (str ? sr_strdup(str) : NULL);
-    rpmtdFree(tag_data);
     return str;
 }
 
@@ -299,20 +299,21 @@ header_get_uint32(Header header,
                   rpmTag tag,
                   uint32_t *result)
 {
-    rpmtd tag_data = rpmtdNew();
-    int success = headerGet(header,
-                            tag,
-                            tag_data,
-                            HEADERGET_DEFAULT);
+    HE_s h;
+    memset(&h, 0, sizeof(h));
+    h.tag = tag;
+    h.ix = -1;
+    int success = headerGet(header, &h, 0);
 
     if (success != 1)
         return false;
 
-    uint32_t *num = rpmtdGetUint32(tag_data);
+    if (h.t != RPM_UINT32_TYPE)
+        return false;
+    uint32_t *num = h.p.ui32p;
     if (num)
         *result = *num;
 
-    rpmtdFree(tag_data);
     return num;
 }
 
@@ -391,14 +392,14 @@ sr_rpm_package_get_by_name(const char *n
     }
 
     rpmts ts = rpmtsCreate();
-    rpmdbMatchIterator iter = rpmtsInitIterator(ts,
+    rpmmi iter = rpmtsInitIterator(ts,
                                                 RPMTAG_NAME,
                                                 name,
                                                 strlen(name));
 
     struct sr_rpm_package *result = NULL;
     Header header;
-    while ((header = rpmdbNextIterator(iter)))
+    while ((header = rpmmiNext(iter)))
     {
         struct sr_rpm_package *package = header_to_rpm_info(header,
                                                             error_message);
@@ -412,7 +413,7 @@ sr_rpm_package_get_by_name(const char *n
         result = sr_rpm_package_append(result, package);
     }
 
-    rpmdbFreeIterator(iter);
+    rpmmiFree(iter);
     rpmtsFree(ts);
     return result;
 #else
@@ -433,14 +434,14 @@ sr_rpm_package_get_by_path(const char *p
     }
 
     rpmts ts = rpmtsCreate();
-    rpmdbMatchIterator iter = rpmtsInitIterator(ts,
+    rpmmi iter = rpmtsInitIterator(ts,
                                                 RPMTAG_BASENAMES,
                                                 path,
                                                 strlen(path));
 
     struct sr_rpm_package *result = NULL;
     Header header;
-    while ((header = rpmdbNextIterator(iter)))
+    while ((header = rpmmiNext(iter)))
     {
         struct sr_rpm_package *package = header_to_rpm_info(header,
                                                             error_message);
@@ -454,7 +455,7 @@ sr_rpm_package_get_by_path(const char *p
         result = sr_rpm_package_append(result, package);
     }
 
-    rpmdbFreeIterator(iter);
+    rpmmiFree(iter);
     rpmtsFree(ts);
     return result;
 #else
